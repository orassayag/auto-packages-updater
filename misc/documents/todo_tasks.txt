=========
REMEMBER!
=========
Each time you change the logic / update NPM package version, do the following steps:
1. Perform a backup before any change has been made, by running on terminal 'npm run backup' or manually to the backups directory.
2. After the change, check that everything works OK.
3. Keep the maintenance - Every change you do - Make sure to update in this document if needed.
4. Do commit + push on Git project repository.
5. Keep the backup update - Every change you do - Update in iOmega (each couple of days do backup there).
=================================

ToDo tasks:
===========
-Build the 'backup' logic + initiate service logic. *
-In the first step, to detect outdated NPM packages in a list projects, and log each project results into a TXT file.
-Add validation that if no projects exists in the project.json file - Throw an exception.
-On the custom package file, validate the package name - Make sure it exists.
-Add validation to the maximum character count to the project's name.
-Convert all 'new Date()' to be from the timeUtils. Change in all places.
-For each package name and package version, validate the name (Also here, validate maximum character count to package name and cut the rest).
-Validate only that package version exists.
-If a specific project is invalid for some reason, continue to the next project.
-If a specific package is invalid for some reason, continue to the next package.
-If package.json does not include any packages, continue to the next project.
-Add unexpected and excpected fields validation, like in the udemy courses project.
-For each any reason that faild or any exception that has been throwen - Log it under the project title.
-After the NPM update packages, will verify the update by checking the package.json file again.
-A referance: https://github.com/chegele/AutoGitUpdate/blob/master/index.js
-Each configuration of a project will look as the following:
[{
   "name": "project-name",
   "update-type": "FULL", ("FULL" / "CUSTOM")
   "packages-path": "C:\\package.json",
   "custom-packages-path": null,
   "exclude-packages-list": null, / [
       "jsdom"
   ],
   "include-dev-dependencies": true / false
}]
-Validate that each project: All fields exists and in the correct type, updateType correct,
 package.json path exists and valid, if customPackagesPath path exists - need to be valid.
-Convert to list of projects classes.
-Do the logic of validating.
-The output of the TXT file of the first step will look like:
===sender (1/13)===
jsdom: ^16.5.2 => ^16.5.3
===udemy-courses (0/22)===
-All packages up to date.
===youtube-comments (0/12)===
-All packages up to date.
-Add example of the projects.json file in the 'misc/examples' directory.
-Add exmaple of customPackagesPath file in the 'misc/examples' directory.
-Add README.txt file with explination for each field of the project.json file (place it in the 'misc/examples' directory).
-The log progress will look like:
===Working: sender (1/13 | 65.49%)===
-Rename and check: countLimitService.countLimitData.millisecondsSendEmailDelayCount.
-Second step:
-In the second step, it will auto-update the package.json with the new version of the outdated NPM packages,
 and recreate the package-lock.json file, remove the last empty line of the files, remove the node_modules directory,
 and log all the updated projects.
-Add the number of maximum retries on each project on settings.js. Log all the retries results.
-The output of the TXT file of the second step will look like:
===sender (2/13)===
jsdom: ^16.5.2 => ^16.5.3 | V Updated
jsdom: ^16.5.2 => ^16.5.3 | X Failed
===udemy-courses (0/22)===
-All packages up to date.
===youtube-comments (0/12)===
-All packages up to date.
-Edit the package.json description, the INSTRUCTIONS.md, and the README.md files.
-Update packages + Recreate package-lock.json.
-Remove code comments to a backup TXT file.
-Convert " to ' in the relevant places.
-Remove all 'debugger' keywords.
-Recheck error numbers in error_index.txt.
-Check 'let' needs to be converted to 'const'.
-Check places to change from simple parameters with dynamic objects to classes.
-Make sure all comments '//' have: 1. space 2. ends with a dot.
-Make sure 'id' => 'Id', 'url' => 'URL', 'api' => 'API'.
-Make sure spaces in all files between bottom, need to fix cases like this:
}
module.exports
}
export default
-Change all '.length > 0' to 'isExists'.
-Remove duplicate import/require (convert to index.js if possible).
-Sort alphabetically all the imports/requires by https://alphabetizer.flap.tv/.
-Sort alphabetically all the imports/requires: external packages, settings, (containers, components, store, assert) data, models, enums, services, utils.
-File extensions should be upper case: JSON, TXT, etc.
-Remove the space lines inside methods and functions.
-Remove the duplicate empty lines: \n\s*\n\s*\n
-Remove the last empty line: \n\s*$(?!\n)
-Detect all comments without a dot at the end: ^// .*(?<!\.)$
-Do all the 'ToDo' tasks.
-Format all documents.
-Verify all works well + Write on each project the task to update packages.
-Fix TXT files spell mistakes via Gmail.
-Move all complete tasks from here to complete_tasks.txt.
-Upload to GitHub.
-Backup to iOmega.

Complete / canceled tasks:
==========================
 and the version (by regex - Take it from the crawler project). *