Complete / canceled tasks:
==========================
-Refactor all git commands into one service. *
-Add retry (with sleep and maximum retries count) on the temporary delete direcotry. *
-Add logic to: *
1. Reorder all parent git repository to be last. *
2. Clone the project only one time. *
-Add auto git update in case starter-kits has been updated (add new field - parent git name. Only filled in starter-kits). *
-Add title and status while handling the parent git repository. *
-Change back to MAXIMUM_PROJECTS_UPDATE_COUNT: 5 - canceled. *
-Add clear temporary directory on load. *
-Fix bug - Currently not working. *
-Add flag for isSimulateUpdateMode (Not really update the project and update the Git repository). *
-Create temporary directory only if exists updated=true projects. *
-Add flag to do auto-updates (if true create temporary directory and all the rest of the logic). *
-Simulate error to verify all works + exceeded errors count. *
-Add to the source file "isUpdate". If true = update. If false = Don't update. *
-Second step - Different scripts, same logic with a flag of true (each project will be with flag): *
 01. Adjust new validations on settings.js file. *
 02. Create the temporary directory. *
 03. Run the script as today. *
 04. Get all the outdated packages. *
 05. Get all the projects with 'isUpdate' = true and loop on them. *
 06. Of course, if no updates are available, it won't be included in the array of 'isUpdate' projects. *
 07. Validate all fields in sources.json file. *
 08. For each project: *
     01. Validate that the project is-packages-update and with status of succes. *
     02. Log the progress. *
     03. Clean the temporary directory. *
     04. Download the repository from GitHub to the temporary directory. *
     05. If the package-lock.json exists, delete it. *
     06. Update the package.json file with the updated packages versions. *
     07. Run 'npm i', wait for the results. *
     08. Remove the last empty line in the package.json and package-lock.json files. *
     09. After the NPM update packages, will verify the update by checking the package.json file again. *
     10. Check if the project is-git-update = true in order to continue with the flow. *
     11. If successful, run 'git add .', run 'git commit -m 'update packages'', and run 'git push' and wait for a successful message.
     12. Update all packages statuses. *
     13. If failed, add 1 to the retries, and go to the retry process. *
     14. If retries exceeded the limit, mark an error to the project and continue to the next project. *
     15. After verification complete, delete the package.json and package-lock.json files from the original project. *
     16. After deletion completes, copy the updated package.json and package-lock.json files to the original project's path. *
     17. Delay the application and move to the next project to update. *
 09. Delete the temporary direcotry. *
 10. If there are more updates than the maximum project's update count - Do random. *
 11. Do the logic for starter-kits. *
 12. Return the original source.json. *
 13. Adjust source.json to new structure. *
 14. Merge of name and display name - Display name will by dynamiclly calculated. *
     If equal assign display name to be name. If Different - displayName will be name + displayName. *
 15. Add counter for maximum updated projects. *
 16. Test full run.
-Support for multi package.json project (Each directory that contains in the rooy a package.json file it's a project). *
-Add limit count for updates. The default is 5. *
-Need to find a way to make all this process automatically, as the project name suggests. All git fetch and git *
 add and git commit and git push and delete delete .git directory need to be automatically. *
-Add option to scan each package.json file, and the title will be auto synced with the root directory name - canceled. *
-Add all the projects to the source file, add a new type of "project" / "maintenance" - canceled. *
-For other text files, just print the updates available for the "past" types - canceled. *
-In the second step, it will auto-update the package.json with the new version of the outdated NPM packages *
 and recreate the package-lock.json file, remove the last empty line of the files, remove the node_modules directory, *
 and log all the updated projects. *
-Check if the node_moudles directory exists, if not, create and delete it. If it is, re-create it without deleting it - canceled. *
-Add the number of maximum retries on each project on settings.js. Log all the retries results - canceled. *
-The output of the TXT file of the second step will look like: *
===sender (2/13)=== *
jsdom: ^16.5.2 => ^16.5.3 | V Updated *
jsdom: ^16.5.2 => ^16.5.3 | V Updated *
===udemy-courses (0/22)=== *
-success | All packages up to date. *
===youtube-comments (0/12)=== *
-success | All packages up to date. *
-Add flag to log only the projects who have updates. The default is true. *
-Fix bug with trailing spaces in the dist output TXT file. *
-Update packages + Recreate package-lock.json. *
-Update packages + Recreate package-lock.json. *
-Add to the 'package.json' file (below the 'description' field) the 'repository' field: *
"repository": { *
  "type": "git", *
  "url": "git://github.com/username/repository.git" *
} *
-Convert in all places from all versions of canceled keyword to 'Canceled' keyword. *
-Add in all places 'name.model' to all models. *
-Check that in all places the name of the file includes the name of tha parent directory. For example: name.model inside 'models' directory. *
-Don't forget to do the same rename logic for all the enums in the project. *
-Fixed bug with empty value. *
-Change in all places the config from 'misc/backup' to 'misc/backups' directory. *
-Change all (where it's possible) from 'console.log' to 'logUtils.log'. *
-Take the latest settings from '.vscode/settings.json' and implement them. *
-Change in all places that globalUtils will be on top. *
-Replace the 'getCurrentDate' method with the updated one from the 'udemy-courses' project. *
-Copy the '.eslintignore' file from the 'udemy-courses' project. *
-Convert all 'new Date()' to be from the timeUtils. Change in all places. *
-Fix TXT files spell mistakes via Gmail (Also, convert '_' to ' ' in all places when checking). *
-Make sure all switch-case have curly braces. *
-Reformat all files + Add words to the workspace dictionary. *
-Scan all files for spell mistakes with the 'files-spell-checker' project. *
-Edit the package.json description, the INSTRUCTIONS.md, and the README.md files. *
-Update packages + Recreate package-lock.json. *
-Remove code comments to a backup TXT file. *
-Convert " to ' in the relevant places. *
-Remove all 'debugger' keywords. *
-Recheck error numbers in error_index.txt. *
-Check 'let' needs to be converted to 'const'. *
-Check places to change from simple parameters with dynamic objects to classes. *
-Make sure all comments '//' have: 1. space 2. ends with a dot. *
-Make sure 'id' => 'Id', 'url' => 'URL', 'api' => 'API'. *
-Make sure spaces in all files between bottom, need to fix cases like this: *
} *
module.exports *
} *
export default *
-Change all '.length > 0' to 'isExists'. *
-Remove duplicate import/require (convert to index.js if possible). *
-Sort alphabetically all the imports/requires by https://alphabetizer.flap.tv/. *
-Sort alphabetically all the imports/requires: external packages, settings, (containers, components, store, assert) data, models, enums, services, utils. *
-File extensions should be upper case: JSON, TXT, etc. *
-Remove the space lines inside methods and functions. *
-Remove the duplicate empty lines: \n\s*\n\s*\n *
-Remove the last empty line: \n\s*$(?!\n) *
-Detect all comments without a dot at the end: ^// .*(?<!\.)$ *
-Do all the 'ToDo' tasks. *
-Search for 'async ' and create a list of functions/methods, and make sure that all calls have await. *
-Format all documents. *
-Verify all works well + Build the project.json with all the real projects and write on each project the task to update packages. *
-Remove the 'test' directory from the project's directory. *
-Fix TXT files spell mistakes via Gmail. *
-Move all complete tasks from here to complete_tasks.txt. *
-Upload to GitHub. *
-Backup to iOmega. *
-Add example of the projects.json file in the 'misc/examples' directory. *
-Add example of customPackagesPath file in the 'misc/examples' directory. *
-Add README.txt file with explanation for each field of the project.json file (place it in the 'misc/examples' directory). *
-Rename and check: countLimitService.countLimitData.millisecondsSendEmailDelayCount. *
-The console log progress will look like: *
===Working: sender (1/13 | 05.50%)=== *
-For each any reason that failed or any exception that has been thrown - Log it under the project title. *
-Add delay between each project check/update - Canceled. *
-Add standard/silent modes for debugging - Canceled. *
-The output of the TXT file of the first step will look like: *
===sender (1/13)=== *
jsdom: ^16.5.2 => ^16.5.3 *
===udemy-courses (0/22)=== *
-success | All packages up to date. *
===youtube-comments (0/12)=== *
-success | All packages up to date. *
===[GENERAL] Time: 00.00:00:13 [/] | Method: OUTDATED/UPDATE | Projects: 1/13 (05.50%) | Status: INITIATE/OUTDATE/UPDATE/PAUSE/FINISH=== - Canceled. *
===[PROCESS] Purchase: ✅  0 | Fail: ❌  0=== - Canceled. *
===[DATA] Name: sender | Update Type: full | Status: SUCCESS=== // Limit count characters - Canceled. *
===[RESULT] Success to find the outdated packages===  // Limit count characters - Canceled. *
-Convert to list of project classes. *
-Add validation that if the update type is 'custom' and no custom packages found - Log error to the project. *
-Do the logic of validating. *
-Add validation for duplicate project with the same package.json path. *
-Clear duplicate packages if accidentally exist (custom and exclude, dependencies and devDependencies are objects). *
-Add maximum projects to check - After that, take the first count of projects. *
-Each configuration of a project will look as the following: *
[{ *
   "name": "project-name", *
   "update-type": "FULL", ("FULL" / "CUSTOM") *
   "packages-path": "C:\\package.json", *
   "custom-packages-path": null, *
   "exclude-packages-list": null, / [ *
       "jsdom" *
   ], *
   "include-dev-dependencies": true / false *
}] *
-A reference: https://github.com/chegele/AutoGitUpdate/blob/master/index.js *
-Validate that each project: All fields exists and in the correct type, updateType correct, *
 package.json path exists and valid, if customPackagesPath path exists - need to be valid. *
-Build the 'backup' logic + initiate service logic. *
-In the first step, to detect outdated NPM packages in a list of projects, and log each project results into a TXT file. *
-Add validation that if no projects exist in the project.json file - Throw an exception. *
-If a specific package is invalid for some reason, continue to the next package - Canceled. *
-For each package name and package version, validate the name (Also here, validate maximum character count to package name and cut the rest) - Canceled. *
-Validate only that package version exists - Canceled. *
-Rebuild the package logic.
-On the custom package file, validate the package name - Make sure it exists - Canceled. *
-Add validation to the maximum character count to the project's name - Canceled. *
-Convert all 'new Date()' to be from the timeUtils. Change in all places. *
-If a specific project is invalid for some reason, continue to the next project. *
-If package.json does not include any packages, continue to the next project. *
-Add unexpected and expected fields validation on the projectsData and on all the project's packages lists, *
like in the udemy courses project, and validate the status (on projectData). *
 and the version (by regex - Take it from the crawler project). *  